<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一些碎碎念</title>
  
  <subtitle>路漫漫其修远兮，边走边看吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.noway.pub/"/>
  <updated>2023-10-09T13:07:22.891Z</updated>
  <id>https://www.noway.pub/</id>
  
  <author>
    <name>番茄炒蛋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stripe-payment</title>
    <link href="https://www.noway.pub/2023/10/09/stripe-payment/"/>
    <id>https://www.noway.pub/2023/10/09/stripe-payment/</id>
    <published>2023-10-09T09:37:03.000Z</published>
    <updated>2023-10-09T13:07:22.891Z</updated>
    
    <content type="html"><![CDATA[<p>最近接收项目遇到一个bug, 使用stripe的payment相关支付的时候页面展示的元素重复，见下图</p><p><img src="/images/stripe.jpg"></p><p>相关代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">const</span> <span class="token literal-property property">paymentElementOptions</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token string">'tabs'</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"payment-form"</span> onSubmit<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span> className<span class="token operator">=</span><span class="token string">"text-cap"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>LinkAuthenticationElement id<span class="token operator">=</span><span class="token string">"link-authentication-element"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>AddressElement options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'billing'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>PaymentElement id<span class="token operator">=</span><span class="token string">"payment-element"</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span>paymentElementOptions<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Center<span class="token operator">></span>        <span class="token operator">&lt;</span>Button my<span class="token operator">=</span><span class="token string">"4"</span> colorScheme<span class="token operator">=</span><span class="token string">"green"</span> type<span class="token operator">=</span><span class="token string">"submit"</span> disabled<span class="token operator">=</span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">||</span> <span class="token operator">!</span>stripe <span class="token operator">||</span> <span class="token operator">!</span>elements<span class="token punctuation">&#125;</span> id<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"button-text"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">?</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"spinner"</span> id<span class="token operator">=</span><span class="token string">"spinner"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">:</span> <span class="token string">'Pay Now'</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Center<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* Show any error or success messages */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>Center<span class="token operator">></span><span class="token punctuation">&#123;</span>message <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"payment-message"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Center<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>产品的诉求是需要用户填写相关address的信息<br>看代码 猜测应该是相关配置缺失导致的，<br>第一次接触stripe这个支付的SDK，翻看了一下相关文档，<a href="https://stripe.com/docs/stripe-js/react">https://stripe.com/docs/stripe-js/react</a><br>咋一看没发现有什么不对，也没找到相关配置信息，耐着性子一个一个翻，</p><p>终于在<a href="https://stripe.com/docs/js/elements_object/create_payment_element#payment_element_create-customized_fieldss">payment_element_create-customized_fieldss</a>的文档中找到了一些配置信息</p><h3 id="paymane-element"><a href="#paymane-element" class="headerlink" title="paymane_element"></a>paymane_element</h3> <font color="green">  billingDetails: 'never' | 'auto' | object  Specify never to avoid collecting all billing details in the Payment Element.  If you would like to disable only certain billing details,   pass an object specifying which fields you would like to disable collection for.  The default setting for each field or object is auto.  </font><p>大意就是可以配置相关支付选项的配置信息,有这些配置 默认是auto</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'never'</span> <span class="token operator">|</span> <span class="token string">'auto'</span><span class="token literal-property property">email</span><span class="token operator">:</span><span class="token string">'never'</span> <span class="token operator">|</span> <span class="token string">'auto'</span><span class="token literal-property property">phone</span><span class="token operator">:</span><span class="token string">'never'</span> <span class="token operator">|</span> <span class="token string">'auto'</span><span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">'never'</span> <span class="token operator">|</span> <span class="token string">'auto'</span> <span class="token operator">|</span> object<span class="token comment">// 使用方法</span><span class="token keyword">var</span> paymentElement <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'payment'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">billingDetails</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'never'</span><span class="token punctuation">,</span>      <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'never'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="有一段注意事项："><a href="#有一段注意事项：" class="headerlink" title="有一段注意事项："></a>有一段注意事项：</h5><ul><li><a href="https://stripe.com/docs/js/elements_object/create_payment_element#payment_element_create-options-fields">https://stripe.com/docs/js/elements_object&#x2F;create_payment_element#payment_element_create-options-fields</a></li></ul><p>By default, the Payment Element will collect all necessary details to complete a payment.</p><p>For some payment methods, this means that the Payment Element will collect details like name or email that you may have already collected from the user. If this is the case, you can prevent the Payment Element from collecting these data by using the fields option.</p><p><font color='red'>If you disable the collection of a certain field with the fields option, you must pass that same data to stripe.confirmPayment or the payment will be rejected.</p><p>See below for details.</font></p><p>大意就说：默认情况下，付款元素将收集完成付款所需的所有详细信息。</p><p>对于某些付款方式，这意味着付款元素将收集您可能已从用户那里收集的详细信息，例如姓名或电子邮件。如果是这种情况，您可以使用该选项阻止付款元素收集这些数据fields。</p><p><font color='red'>如果您使用该选项禁用某个字段的收集fields，则必须将相同的数据传递给stripe.confirmPayment ，否则付款将被拒绝</font></p><p> 下面找到 address_element 就好了 </p><h3 id="address-element"><a href="#address-element" class="headerlink" title="address_element"></a>address_element</h3><ul><li><a href="https://stripe.com/docs/js/element/address_element">https://stripe.com/docs/js/element/address_element</a></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>  <font color="red">使用这种方式监听地址变化是有bug的<br>  当你使用chrome的自动填充地址信息的时候，你会发现并没有触发这个onChange的事件<br>  </font></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">const</span> <span class="token function-variable function">handleAddressChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Extract potentially complete address</span>      <span class="token keyword">const</span> address <span class="token operator">=</span> event<span class="token punctuation">.</span>value<span class="token punctuation">.</span>address      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>      <span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>AddressElement options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'billing'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleAddressChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过它提供了另外一种方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PaymentElement<span class="token punctuation">,</span> LinkAuthenticationElement<span class="token punctuation">,</span> useStripe<span class="token punctuation">,</span> AddressElement<span class="token punctuation">,</span> useElements <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@stripe/react-stripe-js'</span> <span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token function">useElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">getAddressValue</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> addressElement <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>addressElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> complete<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> addressElement<span class="token operator">?.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>complete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Allow user to proceed to the next step</span>          <span class="token comment">// Optionally, use value to store the address details</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token keyword">return</span> value        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外需要注意address的value的返回值不仅仅是地址，还有name等字段</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    name<span class="token punctuation">,</span>    email<span class="token punctuation">,</span>    phone<span class="token punctuation">,</span>    <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        line1<span class="token punctuation">,</span>        line2<span class="token punctuation">,</span>        city<span class="token punctuation">,</span>        state<span class="token punctuation">,</span>        country<span class="token punctuation">,</span>        postalCode<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有点矛盾的地方<br><a href="https://stripe.com/docs/js/elements_object/create_address_element#address_element_create-options-mode">https://stripe.com/docs/js/elements_object&#x2F;create_address_element#address_element_create-options-mode</a></p><hr><p>Specify which mode you would like to use Address Element for.</p><p> When shipping mode is used with the Payment Element and Link Authentication Element, it will automatically pass shipping information when confirming Payment Intent or Setup Intent.</p><p>When billing mode is used with the Payment Element, it will automatically pass the billing information when confirming Payment Intent or Setup Intent.</p><h2 id="大意是说当-Address-Element-与Payment-Element联合使用的时候会自动把相关信息带入到支付信息里，实测也确实如此，不过保险起见，也可以自己手动传入"><a href="#大意是说当-Address-Element-与Payment-Element联合使用的时候会自动把相关信息带入到支付信息里，实测也确实如此，不过保险起见，也可以自己手动传入" class="headerlink" title="大意是说当  Address Element 与Payment Element联合使用的时候会自动把相关信息带入到支付信息里，实测也确实如此，不过保险起见，也可以自己手动传入"></a>大意是说当  Address Element 与Payment Element联合使用的时候会自动把相关信息带入到支付信息里，实测也确实如此，不过保险起见，也可以自己手动传入</h2><h3 id="最终的解决"><a href="#最终的解决" class="headerlink" title="最终的解决"></a>最终的解决</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useImperativeHandle<span class="token punctuation">,</span> forwardRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PaymentElement<span class="token punctuation">,</span> LinkAuthenticationElement<span class="token punctuation">,</span> useStripe<span class="token punctuation">,</span> AddressElement<span class="token punctuation">,</span> useElements <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@stripe/react-stripe-js'</span>  <span class="token keyword">export</span> <span class="token keyword">const</span> CheckoutForm <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyInput</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">useStripe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token function">useElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> setEmail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> <span class="token literal-property property">paymentElementOptions</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token string">'tabs'</span><span class="token punctuation">,</span>    <span class="token literal-property property">fields</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">billingDetails</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'never'</span><span class="token punctuation">,</span>        <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'never'</span><span class="token punctuation">,</span>        <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">'never'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">getAddressValue</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> addressElement <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>addressElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> complete<span class="token punctuation">,</span> value <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> addressElement<span class="token operator">?.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>complete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Allow user to proceed to the next step</span>          <span class="token comment">// Optionally, use value to store the address details</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token keyword">return</span> value        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stripe <span class="token operator">||</span> <span class="token operator">!</span>elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> addressValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getAddressValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'===addressValue=='</span><span class="token punctuation">,</span> addressValue<span class="token punctuation">)</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> error <span class="token punctuation">&#125;</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span><span class="token function">confirmPayment</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        elements<span class="token punctuation">,</span>        <span class="token literal-property property">confirmParams</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">return_url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/payment/completion</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>          <span class="token literal-property property">payment_method_data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">billing_details</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">email</span><span class="token operator">:</span> email<span class="token punctuation">,</span>              <span class="token operator">...</span>addressValue<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'card_error'</span> <span class="token operator">||</span> error<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'validation_error'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setMessage</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">'An unexpected error occurred.'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">handleLinkChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> email <span class="token operator">=</span> event<span class="token punctuation">.</span>value<span class="token punctuation">.</span>email    <span class="token function">setEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"payment-form"</span> onSubmit<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleSubmit<span class="token punctuation">&#125;</span> className<span class="token operator">=</span><span class="token string">"text-cap"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>LinkAuthenticationElement id<span class="token operator">=</span><span class="token string">"link-authentication-element"</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleLinkChange<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>AddressElement options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'billing'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>PaymentElement id<span class="token operator">=</span><span class="token string">"payment-element"</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span>paymentElementOptions<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Center<span class="token operator">></span>        <span class="token operator">&lt;</span>Button my<span class="token operator">=</span><span class="token string">"4"</span> colorScheme<span class="token operator">=</span><span class="token string">"green"</span> type<span class="token operator">=</span><span class="token string">"submit"</span> disabled<span class="token operator">=</span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">||</span> <span class="token operator">!</span>stripe <span class="token operator">||</span> <span class="token operator">!</span>elements<span class="token punctuation">&#125;</span> id<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"button-text"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>isLoading <span class="token operator">?</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"spinner"</span> id<span class="token operator">=</span><span class="token string">"spinner"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">:</span> <span class="token string">'Pay Now'</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Center<span class="token operator">></span>      <span class="token punctuation">&#123;</span><span class="token comment">/* Show any error or success messages */</span><span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>Center<span class="token operator">></span><span class="token punctuation">&#123;</span>message <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"payment-message"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Center<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/10/09/stripe-payment/">https://www.noway.pub/2023/10/09/stripe-payment/</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      这几天遇到一个项目使用stripe的时候遇到配置有误，导致元素重复的问题，排查记录一下
    
    </summary>
    
    
      <category term="web" scheme="https://www.noway.pub/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>USD_option_SPY</title>
    <link href="https://www.noway.pub/2023/09/18/USD-option/"/>
    <id>https://www.noway.pub/2023/09/18/USD-option/</id>
    <published>2023-09-18T11:00:46.000Z</published>
    <updated>2023-09-18T11:50:10.311Z</updated>
    
    <content type="html"><![CDATA[<p>无意中在知乎翻到一个人分享的美股期权操作，就copy一下对方的操作，顺便熟悉一下这个理财工具<br><a href="https://zhuanlan.zhihu.com/p/653400473">分享一个小仓位操作——期权策略</a></p><p>摘要如下：</p><blockquote><p>买入SPY的231229的380PUT，2张，同时卖出231229的CALL，1张<br>——前一个操作投入资金780刀<br>——后一个操作投入获得资金881刀<br>期限是大约4个月。<br>方向是判断下跌。</p></blockquote><p>****  SPY，即$标普500 ETF-SPDR(SPY)$ *****.</p><p>参考他的操作我也来了一份</p><blockquote><p>SPY240119C470000 卖出一份期权470的CALL $467<br>SPY240119P380000 买入2份380的PUT $464 </p></blockquote><p>但是我有个疑问：</p><p>如果我持仓不动 这份470的CALL我最多赚取470美金，但是他也会有波动 貌似我也可以通过这个波动率来赚钱</p><p>同理380的这个PUT 只有SPY价格跌到380以下的时候我才会赚钱么？他本身的波动好像也挺高的。</p><p>还不是很懂，买了两本期权的书边学边看，</p><p>反正做空SPY 就行了，我就不相信利息这么高，它还能涨到天上去。。。</p><p>参考文档:<br>-<a href="https://mp.weixin.qq.com/s/twsMqpTrNuH8z7wcbakg3g">美股期权交易策略整理</a></p><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/18/USD-option/">https://www.noway.pub/2023/09/18/USD-option/</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无意中在知乎翻到一个人分享的美股期权操作，就copy一下对方的操作，顺便熟悉一下这个理财工具&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/653400473&quot;&gt;分享一个小仓位操作——期权策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要如下：&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="理财" scheme="https://www.noway.pub/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>空值合并运算符（??）</title>
    <link href="https://www.noway.pub/2023/09/16/Nullish-coalescing/"/>
    <id>https://www.noway.pub/2023/09/16/Nullish-coalescing/</id>
    <published>2023-09-16T06:58:36.000Z</published>
    <updated>2023-09-18T11:01:32.224Z</updated>
    
    <content type="html"><![CDATA[<p>空值合并运算符（??）是一个逻辑运算符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数</p><p>与逻辑或运算符（||）不同，逻辑或运算符会在左侧操作数为假值时返回右侧操作数。比如为假值（例如，’’ 或 0）时会有一些区别</p><p>见下面的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">"default string"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: "default string"</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">42</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: 0</span><span class="token keyword">const</span> bb <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">??</span> <span class="token number">12</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>空值合并运算符 其只在第一个操作数为 null 或 undefined 时（而不是其他假值）返回第二个操作数：</p><p>拓展一下就是 如果?? 左侧的值为 0 或者’’ 或者 false 的时候依然取值为左边的值，并不会进行取右侧值</p><p>在一些代码的书写时填充默认值的时候需要注意</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token literal-property property">isChild</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> data<span class="token punctuation">.</span>name <span class="token operator">??</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment">// 这里的默认值abc就没有填充正确</span><span class="token comment">// name ="";</span><span class="token keyword">const</span> email <span class="token operator">=</span> data<span class="token punctuation">.</span>email <span class="token operator">??</span> <span class="token string">"xxx@163.com"</span><span class="token punctuation">;</span><span class="token comment">// email = "xxx@163.com";data.email===undefined</span><span class="token keyword">const</span> isChild <span class="token operator">=</span> data<span class="token punctuation">.</span>isChild <span class="token operator">??</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// isChild= false;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="短路原则"><a href="#短路原则" class="headerlink" title="短路原则"></a>短路原则</h3><p>与 OR 和 AND 逻辑运算符相似，当左表达式不为 null 或 undefined 时，不会对右表达式进行求值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"函数 A 被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"函数 B 被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"函数 C 被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 依次打印 "函数 A 被调用了"、"函数 C 被调用了"、"foo"</span><span class="token comment">// A() 返回了 undefined，所以运算符两边的表达式都被执行了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 依次打印 "函数 B 被调用了"、"false"</span><span class="token comment">// B() 返回了 false（既不是 null 也不是 undefined）</span><span class="token comment">// 所以右侧表达式没有被执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p>-<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing">空值合并运算符（??）</a></p><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/16/Nullish-coalescing/">https://www.noway.pub/2023/09/16/Nullish-coalescing/</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      空值合并运算符【??】 其只在第一个操作数为 null 或 undefined 时（而不是其他假值）返回第二个操作数
    
    </summary>
    
    
      <category term="web" scheme="https://www.noway.pub/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>九月的一些回想</title>
    <link href="https://www.noway.pub/2023/09/12/sep-something/"/>
    <id>https://www.noway.pub/2023/09/12/sep-something/</id>
    <published>2023-09-12T07:42:13.000Z</published>
    <updated>2023-09-12T07:57:00.693Z</updated>
    
    <content type="html"><![CDATA[<p>一转眼在家歇着已经四个月了，回头来看这四个月的心态真的是发生了很大的变化</p><blockquote><p>5月–抗拒上班<br>五月份的时候刚歇业在家，对上家公司的一些心理感触让我对上班产生了深深的厌倦，程序员就像流水线的工人，日夜不停的在搬砖，没有有点自我价值和自由，于是5月就在家休息，期间阅读了很多期货和股票交易的书籍。</p></blockquote><blockquote><p>6月–无准备的面试<br>六月没有做任何准备的前提下投了一些大厂的简历，约了一些面试，忽然发现在这六七年里自己没有去面试的经验，针对前端八股文的面试超级不适应,这几年面试也都要笔试，磕磕碰碰结果很不理想，搞的我都怀疑自己的前端能力了</p></blockquote><blockquote><p>7月，接受现实<br>7月开始接受现实，在B站和抖音刷面试八股文的视频，在leetcode刷笔试算法题,然而7月已经没有什么投递的机会，中小型公司各种奇奇怪怪的面试体验,一言难尽</p></blockquote><blockquote><p>8月， 开始躺平<br>8月有几个面试都到了三面，四面环节，说实话中意的不多，如今的大环境好像都很卷，让我提不起对新工作的热情。有点落寞，不知道是这个时代错了，还是自己跟不上这个内卷的时代了。</p></blockquote><blockquote><p>9月，中庸的躺平<br>9月找了个remote的工作，在家搬砖，顺便还能照顾小朋友，工作全职，薪水不多，且干着看看吧，人啊总是需要给自己制定一些目标的，如果这个工作还不错，那就可以抽空把自己个人时间多投入一些到其他地方。</p></blockquote><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/12/sep-something/">https://www.noway.pub/2023/09/12/sep-something/</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      记录一下在家歇着的这几个月的心态变化，
    
    </summary>
    
    
      <category term="叨叨" scheme="https://www.noway.pub/tags/%E5%8F%A8%E5%8F%A8/"/>
    
  </entry>
  
  <entry>
    <title>页面首屏渲染优化</title>
    <link href="https://www.noway.pub/2023/09/10/first-screen-speed/"/>
    <id>https://www.noway.pub/2023/09/10/first-screen-speed/</id>
    <published>2023-09-10T09:45:08.000Z</published>
    <updated>2023-09-10T13:26:43.908Z</updated>
    
    <content type="html"><![CDATA[<h3 id="性能优化的核心思想"><a href="#性能优化的核心思想" class="headerlink" title="性能优化的核心思想"></a>性能优化的核心思想</h3><ul><li>减少加载时间</li><li>减少渲染时间</li></ul><h3 id="减少加载时间"><a href="#减少加载时间" class="headerlink" title="减少加载时间"></a>减少加载时间</h3><blockquote><p>最短的时间就是不加载</p></blockquote><h4 id="减少请求数量"><a href="#减少请求数量" class="headerlink" title="减少请求数量"></a>减少请求数量</h4><ul><li>合并请求</li><li>http2</li><li>lazy-load 暂时不用的延时请求</li><li>减少非首屏的资源，webpack 拆包，组件异步加载</li><li>css</li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li>静态资源缓存，CDN</li><li>本地缓存时效：304 等</li></ul><h4 id="提前请求使用的时候立马呈现"><a href="#提前请求使用的时候立马呈现" class="headerlink" title="提前请求使用的时候立马呈现"></a>提前请求使用的时候立马呈现</h4><ul><li><p>rel&#x3D;’preload’ rel&#x3D;’prefetch’</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/prefetch.js<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./nextpage.js<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>提前下发资源 </p><blockquote><p>–cdn预热 App自建下发通道等</p></blockquote></li><li><p>业务接口数据预请求</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Prefetch">什么是链接预取</a><br><a href="https://github.com/xitu/gold-miner/blob/master/TODO/preload-prefetch-and-priorities-in-chrome.md">Preload，Prefetch 和它们在 Chrome 之中的优先级</a></p><h3 id="减少渲染时间"><a href="#减少渲染时间" class="headerlink" title="减少渲染时间"></a>减少渲染时间</h3><blockquote><p>最快的渲染时间就是不需要渲染，使用的时候就已经ready</p></blockquote><ul><li>SSR 服务端渲染</li><li>预渲染 rel&#x3D;prerender –使用不多, App容器内可以自己控制</li><li>首屏加载资源优化</li></ul><h3 id="减少重绘-重排"><a href="#减少重绘-重排" class="headerlink" title="减少重绘&amp;重排"></a>减少重绘&amp;重排</h3><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://alienzhou.github.io/fe-performance-journey/">前端性能优化</a></li></ul><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/10/first-screen-speed/">https://www.noway.pub/2023/09/10/first-screen-speed/</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      前端首屏优化是个老生常谈的问题，面试常见的一个题目，总结归纳一下相关的知识点以及方法
    
    </summary>
    
    
      <category term="web" scheme="https://www.noway.pub/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>可转债基础知识</title>
    <link href="https://www.noway.pub/2023/09/10/ke_zhuan_zhai/"/>
    <id>https://www.noway.pub/2023/09/10/ke_zhuan_zhai/</id>
    <published>2023-09-10T08:35:04.000Z</published>
    <updated>2023-09-10T08:36:01.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>可转换债券（Convertible Bond，CB），简称可转债，又作可换股债券，是一种混合债券及金融衍生品，可按一定规则转换为债券发行公司的股票；其转换价格、转换时间段会在发行前确定。由于附加了认股权证（期权）等多种权益，可转换债券通常票面利率较一般企业债券低。从发行者的角度看，用可转换债券融资的主要优势在于可以减少利息费用，增加股权融资，降低负债率，但如果债券被转换，公司原股东的股权将被稀释。</p></blockquote><blockquote><p>2020年，中国的可转债市场火爆主要是因为可转债规模小、T+0交易，容易被市场投机资金盯上，短期出现炒作现象。10月23日，证监会发布《可转换公司债券管理办法(征求意见稿)》表示，可转债是企业再融资的重要渠道之一，针对近期出现的个别可转债被过分炒作、大涨大跌现象，着重解决投资者适当性管理不适应、交易制度缺乏制衡等问题。同时还强调防范交易风险，加强投资者保护</p></blockquote><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>可转债的价值由两部分构成，债的价值和转股后的股票价值，本质上这个东西就是一个记账式凭证，一般这个凭证的初始票面价值为100元，在发行的时候会约定比如：3年后以10元一股转换为对应发行公司的股票。100元就可以兑换10股，或者三年后以100元价格+利息回购这个凭证。 年利率3%。，则三年后这个凭证的价值就是100+9 &#x3D; 109元。</p><h3 id="收益与风险"><a href="#收益与风险" class="headerlink" title="收益与风险"></a>收益与风险</h3><p>基于以上认知那么理论会有以下几种情况发生</p><h4 id="股票价值变化"><a href="#股票价值变化" class="headerlink" title="股票价值变化"></a>股票价值变化</h4><ul><li><p>三年后股票价值为20元，则用户选择转为股票次可转债价值为200元</p></li><li><p>三年后股票价值为5元，若用户选择转股则亏损50元，这时选择债券则收益为109元。</p></li><li><p>公司倒闭退市，可转债违约– 这两年有发生，比较复杂。so ST的股票可转债谨慎交易</p></li></ul><p>一张面值100的可转债在市场上流通的价值是多种因素构成的，有可能低于100 也有可能偏离很多。但是申购的时候都是按照面值100 来申购的。</p><h4 id="实际可能发生的情况"><a href="#实际可能发生的情况" class="headerlink" title="实际可能发生的情况"></a>实际可能发生的情况</h4><ul><li><p>可转债股价下修，比如实际股票跌到5块钱，则公司可以提案下修可转债的兑换价值为5元</p><blockquote><p>当正股收盘价多个交易日低于当期转股价值的某个百分比时，例如，当公司股票在任意连续三十个交易日中有十五个交易日的收盘价低于当期转股价格的80%时，公司有权提出转股价下调方案，并在股东大会通过后实行。当公司发生送股，配股，派发现金红利等操作时，公司也会相应调整转股价格</p></blockquote></li><li><p>强制赎回  当可转债价格触发提前赎回条款时，公司有权利按债券面值加上应计利息的价格强制赎回可转债</p><blockquote><p>触发条件一般为正股收盘价多个交易日高于当期转股价值的某个百分比，例如公司股票在任意连续30个交易日中至少15个交易日的收盘价格不低于当期转股价格的130%（含130%）时，这种情况叫“强制赎回”。当因可转债未转股余额过少，触发相关赎回机制时也会产生赎回，称为“余额赎回”。最后一种情况是可转债到期后公司按约定赎回债券，叫“到期赎回”。</p></blockquote></li><li><p>强制回售</p><blockquote><p>在可转债回售期限（一般在可转债续存的最后两个计息年度）内，正股收盘价连续多个交易日低于当期转股价格的某个百分比时，例如公司股票在任何连续三十个交易日的收盘价低于当期转股价格的70%时，公司有义务以事先约定的本息价格购买投资者手中全部或部分可转债，这种情况简称“强制回售”。回售触发条款会比转股价下调触发条款更难触发。</p></blockquote></li><li><p>实际转股后股票价格大跌</p><blockquote><p>还是上面的例子，你以10元每股的价格转换了10股，股票价格为12元，但是第二天股票跌停变为12-1.2 &#x3D; 10.8 ，则实际收益为108元。(跌停的例子实际发生过)</p></blockquote></li></ul><h3 id="交易规则"><a href="#交易规则" class="headerlink" title="交易规则"></a>交易规则</h3><ul><li>T+0 交易</li><li>上市首日涨跌幅限制为 【-43.3%,57.3%】</li><li>正常交易日涨跌幅为20%</li><li>Z开头的标记为此可转债今天是最后交易日</li></ul><h3 id="交易建议"><a href="#交易建议" class="headerlink" title="交易建议"></a>交易建议</h3><p> 基于以上知识点，交易可转债时候有以下建议</p><ul><li>ST的股票对应的可转债需求注意风险</li><li>一般低于100的可转债存在无风险套利空间</li><li>如若强制赎回的日期需要关注相关公告，测算好自己的收益</li></ul><blockquote><p>价格不同，选择价格低的，价格相同选择溢价率低的，两者相似，选择到期时间近的或者下修过转股价的。</p></blockquote><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.investor.org.cn/learning_center/gallery/xueqiu_2885/202112/P020211223338406859774.pdf">认知可转债</a></li><li><a href="https://data.eastmoney.com/xg/xg/?mkt=kzz">可转债数据</a></li><li><a href="https://quote.eastmoney.com/center/fullscreenlist.html?st=zgYjb&sr=1#convertible_comparison">可转债比价</a></li><li><a href="https://guba.eastmoney.com/list,zq.html">可转债股吧</a></li><li><img src="https://www.investor.org.cn/learning_center/investors_classroom/hot_topic/online/essay_competition_3067/202208/W020220822517629004873.png"></li></ul><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/10/ke_zhuan_zhai/">https://www.noway.pub/2023/09/10/ke_zhuan_zhai&#x2F;</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      今天在家翻了两本可转债的投资书籍，记录一些心得体会，可转换债券（Convertible Bond，CB），简称可转债，又作可换股债券，是一种混合债券及金融衍生品，可按一定规则转换为债券发行公司的股票，(⊙o⊙)…
    
    </summary>
    
    
      <category term="理财" scheme="https://www.noway.pub/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>typescript修改npm包的类型定义</title>
    <link href="https://www.noway.pub/2023/09/08/NPM_interface/"/>
    <id>https://www.noway.pub/2023/09/08/NPM_interface/</id>
    <published>2023-09-08T12:11:14.000Z</published>
    <updated>2023-09-10T08:36:42.132Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用TS进行开发的时候有时候会遇到第三方库的类型限制导致TS校验不同的情况，这样就需要我们自己重新去定义这个第三库的类型声明文件，今天遇到这个坑，记录一下解决办法。</p><p>正常的一个TS文件如下，就是页面展示一个日期选择器，用的组件是三方库 chakra-dayzed-datepicker</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RangeDatepicker <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'chakra-dayzed-datepicker'</span><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>timeDate<span class="token punctuation">,</span> setTimeDate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Date<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2023/08/10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2023/09/10'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 填充默认时间</span>  <span class="token keyword">return</span>  <span class="token operator">&lt;</span>RangeDatepicker selectedDates<span class="token operator">=</span><span class="token punctuation">&#123;</span>timeDate<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h3><blockquote><p>  进入页面的初始化时候，默认日期为空</p></blockquote><p> 一分钟搞定<br> <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RangeDatepicker <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'chakra-dayzed-datepicker'</span>   <span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">const</span> <span class="token punctuation">[</span>timeDate<span class="token punctuation">,</span> setTimeDate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Date<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token keyword">undefined</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 填充默认时间为空</span>       <span class="token keyword">return</span>  <span class="token operator">&lt;</span>RangeDatepicker selectedDates<span class="token operator">=</span><span class="token punctuation">&#123;</span>timeDate<span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br> 但是，RangeDatepicker 这个组件就报错了<br> <img src="/images/ts-error.png"><br><font color='red'><br>    不能将类型“Date[] | undefined[]”分配给类型“Date[]”。<br>    不能将类型“undefined[]”分配给类型“Date[]”。<br>    不能将类型“undefined”分配给类型“Date”<br></font></p><p>现在问题变成怎么修改 *** chakra-dayzed-datepicker*** 的声明类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Props <span class="token keyword">as</span> DayzedHookProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'dayzed'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CalendarConfigs<span class="token punctuation">,</span> DatepickerConfigs<span class="token punctuation">,</span> DatepickerProps<span class="token punctuation">,</span> PropsConfigs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils/commonTypes'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">RangeCalendarPanelProps</span> <span class="token punctuation">&#123;</span>    dayzedHookProps<span class="token operator">:</span> DayzedHookProps<span class="token punctuation">;</span>    configs<span class="token operator">:</span> CalendarConfigs<span class="token punctuation">;</span>    propsConfigs<span class="token operator">?</span><span class="token operator">:</span> PropsConfigs<span class="token punctuation">;</span>    selected<span class="token operator">?</span><span class="token operator">:</span> Date <span class="token operator">|</span> Date<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> RangeCalendarPanel<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>RangeCalendarPanelProps<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RangeDatepickerProps</span> <span class="token keyword">extends</span> <span class="token class-name">DatepickerProps</span> <span class="token punctuation">&#123;</span>    selectedDates<span class="token operator">:</span> Date<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     configs<span class="token operator">?</span><span class="token operator">:</span> DatepickerConfigs<span class="token punctuation">;</span>    disabled<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    defaultIsOpen<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    closeOnSelect<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    <span class="token function-variable function">onDateChange</span><span class="token operator">:</span> <span class="token punctuation">(</span>date<span class="token operator">:</span> Date<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>    id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    usePortal<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> RangeDatepicker<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>RangeDatepickerProps<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接修改NPM包肯定是不行的，这NPM部署安装一下就是新的所以我们需要<br>重新定义一下RangeDatepickerProps</p><h3 id="具体步骤如下"><a href="#具体步骤如下" class="headerlink" title="具体步骤如下"></a>具体步骤如下</h3><blockquote><p>1.在项目tsconfig.json同级目录新建一个types目录<br>2.创建文件RangeDatepicker.d.ts<br>3.修改tsconfig.json配置的compilerOptions属性指定chakra-dayzed-datepicker的申明文件</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token string-property property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token string-property property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token string-property property">"chakra-dayzed-datepicker"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./types/rangeDatepicker"</span><span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rangeDatepicker.d.ts文件内容如下</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//rangeDatepicker.d.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RangeDatepickerProps <span class="token keyword">as</span> LibRangeDatepickerProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'chakra-dayzed-datepicker/src/'</span><span class="token comment">// 导出RangeDatepickerProps</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'chakra-dayzed-datepicker'</span><span class="token comment">// 默认接口导出</span><span class="token keyword">type</span> <span class="token class-name">RangeDatepickerPropsLess</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>LibRangeDatepickerProps<span class="token punctuation">,</span> <span class="token string">'selectedDates'</span><span class="token operator">></span><span class="token comment">// Omit 干掉selectedDates</span><span class="token keyword">interface</span> <span class="token class-name">RangeDatepickerProps</span> <span class="token keyword">extends</span> <span class="token class-name">RangeDatepickerPropsLess</span> <span class="token punctuation">&#123;</span>  selectedDates<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Date <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span> <span class="token comment">// 复写 selectedDates</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> RangeDatepicker<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>RangeDatepickerProps<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/08/NPM_interface/">https://www.noway.pub/2023/09/08/NPM_interface&#x2F;</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      我们在使用TS进行开发的时候有时候会遇到第三方库的类型限制导致TS校验不同的情况，这样就需要我们自己重新去定义这个第三库的类型声明文件，今天遇到这个坑，记录一下解决办法。
    
    </summary>
    
    
      <category term="typescript" scheme="https://www.noway.pub/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>react setState同步更新与异步更新</title>
    <link href="https://www.noway.pub/2023/09/07/react_setState/"/>
    <id>https://www.noway.pub/2023/09/07/react_setState/</id>
    <published>2023-09-07T14:01:04.000Z</published>
    <updated>2023-09-10T09:45:24.492Z</updated>
    
    <content type="html"><![CDATA[<p>学习react相关的文档知识，有些过时的信息需要及时校正，比如这个setState的同步&amp;异步更新问题以前也是常见的面试题,在react18之后他的答案又变化了，能力的提升就是踩坑的频次。(⊙o⊙)…</p><h2 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h2><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>我们有如下代码，是一个常见的面试题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'abc'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'didmount'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// setTimeout中调用</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout: pre----'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'setTimeout'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout:==== '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>increment2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 合成事件中调用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'react increment==== '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'increment'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'react event: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function-variable function">increment2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 原生事件中调用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dom event: ===='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'dom event'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'dom event: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>couont<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div1"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">&#125;</span><span class="token operator">></span>          <span class="token punctuation">&#123;</span>React<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span>increment1        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"div2"</span><span class="token operator">></span>click me and increment2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在React 18 之前，</p><blockquote><p>只在React 事件处理函数中进行批异步更新。<br>默认情况下，在promise、setTimeout、原生事件处理函数中、或任何其它事件内的更新都是同步的</p></blockquote><p>在React 18 之后</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDom <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRoot <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异步测试 --react18 推荐语法</span><span class="token comment">//createRoot(rootElement).render(&lt;App />);</span><span class="token comment">// 同步测试 --react18 废弃语法</span>ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你用 ReactDom.render 挂载节点的时候会运行得到的效果就是</p><blockquote><p>只在React 事件处理函数中进行批异步更新，其他的 promise、setTimeout、原生事件处理函数中的更新都是同步的<br>当你用 createRoot(rootElement).render(<App />); 挂载节点的时候，<br>所有的更新都是异步的。</p></blockquote><p>本文作者：番茄炒蛋<br />本文地址： <a href="https://www.noway.pub/2023/09/07/react_setState/">https://www.noway.pub/2023/09/07/react_setState&#x2F;</a> <br />版权声明：转载请注明出处！</p>]]></content>
    
    <summary type="html">
    
      学习react相关的文档知识，有些过时的信息需要及时校正，比如这个setState的同步&amp;异步更新问题以前也是常见的面试题,在react18之后他的答案又变化了，能力的提升就是踩坑的频次。(⊙o⊙)…
    
    </summary>
    
    
      <category term="web" scheme="https://www.noway.pub/tags/web/"/>
    
  </entry>
  
</feed>
